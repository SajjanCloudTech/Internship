---
- name: Deploy Java Application on Amazon Linux 2023
  hosts: webservers
  become: yes
  vars:
    app_name: myapp
    tomcat_version: "9.0.99"
    tomcat_archive: "apache-tomcat-{{ tomcat_version }}.tar.gz"
    tomcat_home: "/opt/apache-tomcat-{{ tomcat_version }}"
    tomcat_user: tomcat
    app_source_dir: "/home/ec2-user/app"
    app_build_dir: "/tmp/{{ app_name }}"
    maven_version: "3.9.6"
    maven_home: "/usr/local/apache-maven-{{ maven_version }}"
    maven_download_url: "https://downloads.apache.org/maven/maven-3/{{ maven_version }}/binaries/apache-maven-{{ maven_version }}-bin.tar.gz"

  tasks:
    - name: Install required packages
      yum:
        name:
          - java-11-amazon-corretto-devel
          - httpd
          - unzip
        state: present

    - name: Install Apache modules for reverse proxy
      lineinfile:
        path: /etc/httpd/conf/httpd.conf
        line: "{{ item }}"
        insertafter: "LoadModule alias_module modules/mod_alias.so"
        state: present
      loop:
        - "LoadModule proxy_module modules/mod_proxy.so"
        - "LoadModule proxy_http_module modules/mod_proxy_http.so"
      notify: Restart Apache

    - name: Create Tomcat user
      user:
        name: "{{ tomcat_user }}"
        system: yes
        create_home: no
        shell: /sbin/nologin

    - name: Download Tomcat
      get_url:
        url: "https://dlcdn.apache.org/tomcat/tomcat-9/v{{ tomcat_version }}/bin/{{ tomcat_archive }}"
        dest: "/tmp/{{ tomcat_archive }}"

    - name: Extract Tomcat using tar
      command: "tar -xzf /tmp/{{ tomcat_archive }} -C /opt"
      args:
        creates: "{{ tomcat_home }}"

    - name: Set correct permissions for Tomcat
      file:
        path: "{{ tomcat_home }}"
        owner: "{{ tomcat_user }}"
        group: "{{ tomcat_user }}"
        mode: "0755"
        recurse: yes

    - name: Install Maven 3.9.6
      block:
        - name: Download Apache Maven 3.9.6
          get_url:
            url: "{{ maven_download_url }}"
            dest: "/tmp/apache-maven-{{ maven_version }}.tar.gz"
          become: yes

        - name: Extract Apache Maven 3.9.6
          ansible.builtin.unarchive:
            src: "/tmp/apache-maven-{{ maven_version }}.tar.gz"
            dest: "/usr/local"
            remote_src: yes
          become: yes

        - name: Create a symbolic link for Maven
          file:
            src: "{{ maven_home }}"
            dest: "/usr/local/maven"
            state: link
          become: yes

        - name: Ensure Maven is available in the environment
          copy:
            dest: "/etc/profile.d/maven.sh"
            content: |
              export MAVEN_HOME=/usr/local/maven
              export PATH=$MAVEN_HOME/bin:$PATH
          become: yes

        - name: Apply new environment settings
          shell: source /etc/profile.d/maven.sh
          args:
            executable: /bin/bash
          become: yes

        - name: Verify Maven version
          command: "/usr/local/maven/bin/mvn -version"
          register: maven_version
          changed_when: false

        - name: Debug Maven version
          debug:
            var: maven_version.stdout_lines

    - name: Create Tomcat systemd service file
      copy:
        dest: /etc/systemd/system/tomcat.service
        content: |
          [Unit]
          Description=Apache Tomcat Web Application Container
          After=network.target

          [Service]
          Type=forking
          User=tomcat
          Group=tomcat
          Environment="JAVA_HOME=/usr/lib/jvm/jre"
          Environment="CATALINA_PID={{ tomcat_home }}/temp/tomcat.pid"
          Environment="CATALINA_HOME={{ tomcat_home }}"
          Environment="CATALINA_BASE={{ tomcat_home }}"
          Environment="CATALINA_OPTS=-Xms512M -Xmx1024M -server -XX:+UseParallelGC"
          Environment="JAVA_OPTS=-Djava.awt.headless=true -Djava.security.egd=file:/dev/./urandom"
          ExecStart={{ tomcat_home }}/bin/startup.sh
          ExecStop={{ tomcat_home }}/bin/shutdown.sh

          [Install]
          WantedBy=multi-user.target

    - name: Reload systemd and start Tomcat
      systemd:
        name: tomcat
        state: restarted
        enabled: yes
        daemon_reload: yes

    - name: Ensure Tomcat is running
      command: "curl -s http://localhost:8080"
      register: tomcat_status
      changed_when: false
      failed_when: "'Tomcat' not in tomcat_status.stdout"

    - name: Build Java application using Maven
      shell:
        cmd: "/usr/local/maven/bin/mvn clean package"
        chdir: "{{ app_source_dir }}"
      register: build_result

    - name: Copy WAR file to Tomcat webapps directory
      copy:
        src: "{{ app_source_dir }}/target/my-app-1.0-SNAPSHOT.war"
        dest: "{{ tomcat_home }}/webapps/my-app-1.0-SNAPSHOT.war"
        owner: "{{ tomcat_user }}"
        group: "{{ tomcat_user }}"
        remote_src: yes
      when: build_result.rc == 0

    - name: Configure Apache as a reverse proxy for Tomcat
      blockinfile:
        path: /etc/httpd/conf/httpd.conf
        block: |
          <Proxy *>
            Require all granted
          </Proxy>
          ProxyPass / http://localhost:8080/{{ app_name }}/
          ProxyPassReverse / http://localhost:8080/{{ app_name }}/
      notify: Restart Apache

  handlers:
    - name: Restart Apache
      service:
        name: httpd
        state: restarted
